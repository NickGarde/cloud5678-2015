#pragma config(Motor,  port1,           frontLeft,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port2,           frontRight,    tmotorVex393, openLoop)
#pragma config(Motor,  port3,           backRight,     tmotorVex393, openLoop)
#pragma config(Motor,  port4,           backLeft,      tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port6,           LeftArmLower, tmotorVex393, openLoop)
#pragma config(Motor,  port5,          LeftArmUpper, tmotorVex393, openLoop)
#pragma config(Motor,  port7,           RightArmLower,  tmotorVex393, openLoop)
#pragma config(Motor,  port8,           RightArmUpper,  tmotorVex393, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
  // .....................................................................................
  // Insert user code here.
  // .....................................................................................

	AutonomousCodePlaceholderForTesting();  // Remove this function call once you have "real" code.
}
void driveArcade(int y, int x) {
	motor[frontLeft] = motor[backLeft] = y + x;
	motor[frontRight] = motor[backRight] = y - x;
}
void driveTank(int l, int r) {
	motor[frontLeft] = motor[backLeft] = l;
	motor[frontRight] = motor[backRight] = r;
	
}
void setArmSpeed(int z) {
	motor[RightArmLower] = motor[LeftArmLower] = motor[LeftArmUpper] = motor[RightArmUpper] = z;
}
/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop

	while (true)
	{	int driveX = vexRT[Ch4];
	  	int driveY = vexRT[Ch3] ;
	  	driveArcade(driveY * 100 / 128, driveX * 100 / 128);
	  	 setArmSpeed(vexRT[Ch2]);
	  	//CrapCode
	//motor[LeftRear]=vexRT[Btn6D]*127-vexRT[Btn6U]*127+vexRT[Ch3];
	//motor[LeftFront]=vexRT[Btn6D]*127-vexRT[Btn6U]*127+vexRT[Ch3];
//motor[RightFront]=vexRT[Btn6D]*127-vexRt[Btn6U]*127+vexRT[Ch2];
//motor[RightRear]=vexRT[Btn6D]*127-vexRT[Btn6U]*127+vexRT[Ch2];
	  UserControlCodePlaceholderForTesting(); // Remove this function call once you have "real" code.
	}
}
